// <auto-generated />
using System;
using BMelt.ClassLibrary.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BMelt.ClassLibrary.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220427223022_Nullable properties")]
    partial class Nullableproperties
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Cuisine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Measurement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MealPlanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MealPlanId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.MealPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MealPlans");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.NutritionFact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("AltCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AltMeasurementType")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FactType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeasurementType")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Percentage")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("NutritionFacts");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Step", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSubStep")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Tool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresSupervision")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Cuisine", b =>
                {
                    b.HasOne("BMelt.ClassLibrary.Models.Recipe", null)
                        .WithMany("Cuisines")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Meal", b =>
                {
                    b.HasOne("BMelt.ClassLibrary.Models.MealPlan", null)
                        .WithMany("Meals")
                        .HasForeignKey("MealPlanId");

                    b.HasOne("BMelt.ClassLibrary.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.NutritionFact", b =>
                {
                    b.HasOne("BMelt.ClassLibrary.Models.Recipe", null)
                        .WithMany("NutritionFacts")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Recipe", b =>
                {
                    b.HasOne("BMelt.ClassLibrary.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Step", b =>
                {
                    b.HasOne("BMelt.ClassLibrary.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMelt.ClassLibrary.Models.Recipe", null)
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Tool", b =>
                {
                    b.HasOne("BMelt.ClassLibrary.Models.Recipe", null)
                        .WithMany("Tools")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.MealPlan", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("BMelt.ClassLibrary.Models.Recipe", b =>
                {
                    b.Navigation("Cuisines");

                    b.Navigation("NutritionFacts");

                    b.Navigation("Steps");

                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
